name: SQLsmith
on:
  schedule:
    # run daily 20:00 on main branch
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      seeds:
        # Use this input to run a specific set of seed values. If
        # empty, "number_of_runs" seeds are randomly generated
        # instead.
        description: 'List of (space-separated) seed values'
        default: ''
        type: string
        required: false
      os:
        description: 'The OS to run on'
        required: true
        default: 'ubuntu-20.04'
        type: choice
        options:
          - 'ubuntu-20.04'
          - 'ubuntu-latest'
      build_type:
        description: 'Build type'
        required: true
        type: choice
        default: 'Debug'
        options:
          - 'Debug'
          - 'Release'
      pg:
        description: 'PostgreSQL version'
        required: true
        type: string
        default: '14.2'
      tsdb_build_args:
        description: 'Extra CMake build arguments for TimescaleDB'
        required: false
        type: string
        default: ''
      number_of_runs:
        description: 'Number of SQLsmith runs (ignored if seeds is set)'
        type: number
        default: 10
        required: true
      max_queries:
        description: 'Max number of SQLsmith queries per run'
        type: number
        default: 10000
        required: true
  push:
    branches:
      - sqlsmith
jobs:
  sqlsmith:
    name: SQLsmith PG${{ github.event.inputs.pg }}
    runs-on: ${{ github.event.inputs.os }}
    env:
      PG_SRC_DIR: pgbuild
      PG_INSTALL_DIR: postgresql
    steps:
    # this workflow depends on the cached postgres build from the main regression
    # workflow since that workflow runs daily there should always be a cache hit
    - name: Get PostgreSQL ${{ github.event.inputs.pg }} from cache
      id: cache-postgresql
      uses: actions/cache@v2
      with:
        path: ~/${{ env.PG_SRC_DIR }}
        key: ${{ github.event.inputs.os }}-postgresql-${{ github.event.inputs.pg }}-gcc-${{ github.event.inputs.build_type }}

    # we abort on cache miss otherwise we would have to reproduce most variables
    # of the main regression build matrix in this workflow
    - name: Abort on cache miss
      if: steps.cache-postgresql.outputs.cache-hit != 'true'
      run: false

    - name: Install Linux Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison systemd-coredump gdb clang-9 llvm-9 llvm-9-dev llvm-9-tools build-essential autoconf autoconf-archive libpqxx-dev libboost-regex-dev libsqlite3-dev

    - name: Install PostgreSQL ${{ github.event.inputs.pg }} ${{ github.event.inputs.build_type }}
      run: |
        make -C ~/$PG_SRC_DIR install
        make -C ~/$PG_SRC_DIR/contrib/postgres_fdw install

    - name: Checkout TimescaleDB
      uses: actions/checkout@v2

    - name: Build TimescaleDB
      run: |
        ./bootstrap -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type }} -DPG_SOURCE_DIR=~/$PG_SRC_DIR -DPG_PATH=~/$PG_INSTALL_DIR ${{ github.event.inputs.tsdb_build_args }}
        make -C build
        make -C build install

    - name: Checkout sqlsmith
      uses: actions/checkout@v2
      with:
        repository: 'timescale/sqlsmith'
        path: 'sqlsmith'
        ref: 'timescaledb'

    - name: Build SQLsmith
      run: |
        cd sqlsmith
        autoreconf -i
        ./configure
        make

    - name: Setup test environment
      run: |
        mkdir ~/pgdata
        ~/$PG_INSTALL_DIR/bin/initdb ~/pgdata
        ~/$PG_INSTALL_DIR/bin/pg_ctl -D ~/pgdata start -o "-cshared_preload_libraries=timescaledb" -o "-cmax_connections=200" -o "-cmax_prepared_transactions=100"
        psql -h /tmp postgres -c 'CREATE DATABASE smith;'
        psql -h /tmp smith -c 'CREATE EXTENSION timescaledb;'
        psql -h /tmp smith -v ROLE_DEFAULT_PERM_USER=$USER -c '\i ${{ github.workspace }}/tsl/test/shared/sql/include/shared_setup.sql'

    - name: Generate and show seeds
      run: |
        cd sqlsmith
        if [ -z "${{ github.event.inputs.seeds }}" ]; then
           for i in `seq 1 ${{ github.event.inputs.number_of_runs }}`; do
                echo -n "$((16#$(openssl rand -hex 3))) " >> seeds.txt;
            done
        else
            echo "${{ github.event.inputs.seeds }}" > seeds.txt
        fi
        echo -n "Using seeds: "
        cat seeds.txt

    - name: Run SQLsmith
      run: |
        cd sqlsmith
        for seed in $(cat seeds.txt); do
            echo "Running with seed $seed"
            TIMESTAMP=$(date +"%F %R")
            ./sqlsmith --seed=$seed --exclude-catalog --target="host=/tmp dbname=smith" --max-queries=${{ github.event.inputs.max_queries }} --dump-all-queries > queries-$seed.log;
            coredumpctl list -r --no-pager --since $TIMESTAMP || true
        done

    - name: Check for coredumps
      if: always()
      id: collectlogs
      run: |
        # wait for in progress coredumps
        sleep 10
        if coredumpctl list; then
          echo "::set-output name=coredumps::true"
          false
        fi

    - name: Stack trace
      if: always() && steps.collectlogs.outputs.coredumps == 'true'
      run: |
        echo "bt full" | sudo coredumpctl gdb
        ./scripts/bundle_coredumps.sh
        false

    - name: Upload Coredumps
      if: always() && steps.collectlogs.outputs.coredumps == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: Coredumps sqlsmith ${{ github.event.inputs.os }} PG${{ github.event.inputs.pg }}
        path: coredumps

    - name: Upload seeds
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Seeds ${{ github.event.inputs.os }} PG${{ github.event.inputs.pg }}
        path: sqlsmith/seeds.txt

    - name: Upload query logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: SQL query logs ${{ github.event.inputs.os }} PG${{ github.event.inputs.pg }}
        path: sqlsmith/queries-*.log
