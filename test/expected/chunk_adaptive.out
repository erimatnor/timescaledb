-- Valid chunk sizing function for testing
CREATE OR REPLACE FUNCTION calculate_chunk_interval(
        dimension_id INTEGER,
        dimension_coord BIGINT,
        chunk_target_size BIGINT
)
    RETURNS BIGINT LANGUAGE PLPGSQL AS
$BODY$
DECLARE
BEGIN
    RETURN -1;
END
$BODY$;
-- Chunk sizing function with bad signature
CREATE OR REPLACE FUNCTION bad_calculate_chunk_interval(
        dimension_id INTEGER
)
    RETURNS BIGINT LANGUAGE PLPGSQL AS
$BODY$
DECLARE
BEGIN
    RETURN -1;
END
$BODY$;
-- Set a fixed effective memory cache size to make tests determinstic
-- (independent of available machine memory)
SELECT * FROM test.set_effective_memory_cache_size('2GB');
 set_effective_memory_cache_size 
---------------------------------
                      2147483648
(1 row)

CREATE TABLE test_adaptive(time timestamptz, temp float, location int);
\set ON_ERROR_STOP 0
-- Bad signature of sizing func should fail
SELECT create_hypertable('test_adaptive', 'time',
                         chunk_target_size => '1MB',
                         chunk_sizing_func => 'bad_calculate_chunk_interval');
ERROR:  invalid function signature
\set ON_ERROR_STOP 1
-- Setting sizing func with correct signature should work
SELECT create_hypertable('test_adaptive', 'time',
                         chunk_target_size => '1MB',
                         chunk_sizing_func => 'calculate_chunk_interval');
WARNING:  target chunk size for adaptive chunking is less than 10 MB
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

DROP TABLE test_adaptive;
CREATE TABLE test_adaptive(time timestamptz, temp float, location int);
-- Size but no explicit func should use default func
SELECT create_hypertable('test_adaptive', 'time',
                         chunk_target_size => '1MB',
                         create_default_indexes => true);
WARNING:  target chunk size for adaptive chunking is less than 10 MB
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |           1048576
(1 row)

-- Change the target size
SELECT * FROM set_adaptive_chunking('test_adaptive', '2MB');
WARNING:  target chunk size for adaptive chunking is less than 10 MB
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |           2097152
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |           2097152
(1 row)

\set ON_ERROR_STOP 0
-- Setting NULL func should fail
SELECT * FROM set_adaptive_chunking('test_adaptive', '1MB', NULL);
ERROR:  invalid chunk sizing function
\set ON_ERROR_STOP 1
-- Setting NULL size disables adaptive chunking
SELECT * FROM set_adaptive_chunking('test_adaptive', NULL);
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |                 0
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |                 0
(1 row)

SELECT * FROM set_adaptive_chunking('test_adaptive', '1MB');
WARNING:  target chunk size for adaptive chunking is less than 10 MB
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |           1048576
(1 row)

-- Setting size to 'off' should also disable
SELECT * FROM set_adaptive_chunking('test_adaptive', 'off');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |                 0
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |                 0
(1 row)

-- Setting 0 size should also disable
SELECT * FROM set_adaptive_chunking('test_adaptive', '0MB');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |                 0
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |                 0
(1 row)

SELECT * FROM set_adaptive_chunking('test_adaptive', '1MB');
WARNING:  target chunk size for adaptive chunking is less than 10 MB
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |           1048576
(1 row)

-- No warning about small target size if > 10MB
SELECT * FROM set_adaptive_chunking('test_adaptive', '11MB');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |          11534336
(1 row)

-- Setting size to 'estimate' should also estimate size
SELECT * FROM set_adaptive_chunking('test_adaptive', 'estimate');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |         536870912
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |         536870912
(1 row)

-- Use a lower memory setting to test that the calculated chunk_target_size is reduced
SELECT * FROM test.set_effective_memory_cache_size('512MB');
 set_effective_memory_cache_size 
---------------------------------
                       536870912
(1 row)

SELECT * FROM set_adaptive_chunking('test_adaptive', 'estimate');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |         134217728
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |         134217728
(1 row)

-- Reset memory settings
SELECT * FROM test.set_effective_memory_cache_size('2GB');
 set_effective_memory_cache_size 
---------------------------------
                      2147483648
(1 row)

-- Set a reasonable test value
SELECT * FROM set_adaptive_chunking('test_adaptive', '1MB');
WARNING:  target chunk size for adaptive chunking is less than 10 MB
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |           1048576
(1 row)

-- Show the interval length before and after adaptation
SELECT id, hypertable_id, interval_length FROM _timescaledb_catalog.dimension;
 id | hypertable_id | interval_length 
----+---------------+-----------------
  2 |             2 |   2592000000000
(1 row)

-- Generate data to create chunks. We use the hash of the time value
-- to get determinstic location IDs so that we always spread these
-- values the same way across space partitions
INSERT INTO test_adaptive
SELECT time, random() * 35, _timescaledb_internal.get_partition_hash(time) FROM
generate_series('2017-03-07T18:18:03+00'::timestamptz - interval '175 days',
                '2017-03-07T18:18:03+00'::timestamptz,
                '2 minutes') as time;
SELECT * FROM chunk_relation_size('test_adaptive');
 chunk_id |               chunk_table               | partitioning_columns |  partitioning_column_types   | partitioning_hash_functions |                 ranges                  | table_bytes | index_bytes | toast_bytes | total_bytes 
----------+-----------------------------------------+----------------------+------------------------------+-----------------------------+-----------------------------------------+-------------+-------------+-------------+-------------
        1 | _timescaledb_internal._hyper_2_1_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1472256000000000,1474848000000000)"} |      491520 |      352256 |             |      843776
        2 | _timescaledb_internal._hyper_2_2_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1474848000000000,1477440000000000)"} |     1155072 |      835584 |             |     1990656
        3 | _timescaledb_internal._hyper_2_3_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1477440000000000,1478587665709296)"} |      524288 |      385024 |             |      909312
        4 | _timescaledb_internal._hyper_2_4_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1478587665709296,1479952935945408)"} |      622592 |      450560 |             |     1073152
        5 | _timescaledb_internal._hyper_2_5_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1479952935945408,1481318206181520)"} |      622592 |      450560 |             |     1073152
        6 | _timescaledb_internal._hyper_2_6_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1481318206181520,1482683476417632)"} |      622592 |      450560 |             |     1073152
        7 | _timescaledb_internal._hyper_2_7_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1482683476417632,1484048746653744)"} |      622592 |      450560 |             |     1073152
        8 | _timescaledb_internal._hyper_2_8_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1484048746653744,1485414016889856)"} |      622592 |      450560 |             |     1073152
        9 | _timescaledb_internal._hyper_2_9_chunk  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1485414016889856,1486779287125968)"} |      622592 |      450560 |             |     1073152
       10 | _timescaledb_internal._hyper_2_10_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1486779287125968,1488144557362080)"} |      622592 |      450560 |             |     1073152
       11 | _timescaledb_internal._hyper_2_11_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1488144557362080,1489509827598192)"} |      360448 |      262144 |             |      622592
(11 rows)

-- Do same thing without an index on the time column. This affects
-- both the calculation of fill-factor of the chunk and its size
CREATE TABLE test_adaptive_no_index(time timestamptz, temp float, location int);
-- Size but no explicit func should use default func
-- No default indexes should warn and use heap scan for min and max
SELECT create_hypertable('test_adaptive_no_index', 'time',
                         chunk_target_size => '1MB',
                         create_default_indexes => false);
WARNING:  target chunk size for adaptive chunking is less than 10 MB
WARNING:  no index on "time" found for adaptive chunking on hypertable "test_adaptive_no_index"
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT id, hypertable_id, interval_length FROM _timescaledb_catalog.dimension;
 id | hypertable_id | interval_length 
----+---------------+-----------------
  2 |             2 |   1365270236112
  3 |             3 |   2592000000000
(2 rows)

INSERT INTO test_adaptive_no_index
SELECT time, random() * 35, _timescaledb_internal.get_partition_hash(time) FROM
generate_series('2017-03-07T18:18:03+00'::timestamptz - interval '175 days',
                '2017-03-07T18:18:03+00'::timestamptz,
                '2 minutes') as time;
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_12_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_12_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_13_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_12_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_13_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_14_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_13_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_14_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_15_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_14_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_15_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_16_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_15_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_16_chunk"
WARNING:  no index on "time" found for adaptive chunking on chunk "_hyper_3_17_chunk"
SELECT * FROM chunk_relation_size('test_adaptive_no_index');
 chunk_id |               chunk_table               | partitioning_columns |  partitioning_column_types   | partitioning_hash_functions |                 ranges                  | table_bytes | index_bytes | toast_bytes | total_bytes 
----------+-----------------------------------------+----------------------+------------------------------+-----------------------------+-----------------------------------------+-------------+-------------+-------------+-------------
       12 | _timescaledb_internal._hyper_3_12_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1472256000000000,1474848000000000)"} |      491520 |           0 |             |      491520
       13 | _timescaledb_internal._hyper_3_13_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1474848000000000,1477440000000000)"} |     1155072 |           0 |             |     1155072
       14 | _timescaledb_internal._hyper_3_14_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1477440000000000,1480032000000000)"} |     1155072 |           0 |             |     1155072
       15 | _timescaledb_internal._hyper_3_15_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1480032000000000,1482624000000000)"} |     1155072 |           0 |             |     1155072
       16 | _timescaledb_internal._hyper_3_16_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1482624000000000,1485216000000000)"} |     1155072 |           0 |             |     1155072
       17 | _timescaledb_internal._hyper_3_17_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1485216000000000,1487808000000000)"} |     1155072 |           0 |             |     1155072
       18 | _timescaledb_internal._hyper_3_18_chunk | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1487808000000000,1490400000000000)"} |      507904 |           0 |             |      507904
(7 rows)

-- Test with space partitioning. This might affect the estimation
-- since there are more chunks in the same time interval and space
-- chunks might be unevenly filled.
CREATE TABLE test_adaptive_space(time timestamptz, temp float, location int);
SELECT create_hypertable('test_adaptive_space', 'time', 'location', 2,
                         chunk_target_size => '1MB',
                         create_default_indexes => true);
WARNING:  target chunk size for adaptive chunking is less than 10 MB
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT id, hypertable_id, interval_length FROM _timescaledb_catalog.dimension;
 id | hypertable_id | interval_length 
----+---------------+-----------------
  2 |             2 |   1365270236112
  3 |             3 |   2592000000000
  4 |             4 |   2592000000000
  5 |             4 |                
(4 rows)

INSERT INTO test_adaptive_space
SELECT time, random() * 35, _timescaledb_internal.get_partition_hash(time) FROM
generate_series('2017-03-07T18:18:03+00'::timestamptz - interval '175 days',
                '2017-03-07T18:18:03+00'::timestamptz,
                '2 minutes') as time;
SELECT * FROM chunk_relation_size('test_adaptive_space');
 chunk_id |               chunk_table               | partitioning_columns |      partitioning_column_types       |           partitioning_hash_functions           |                                   ranges                                    | table_bytes | index_bytes | toast_bytes | total_bytes 
----------+-----------------------------------------+----------------------+--------------------------------------+-------------------------------------------------+-----------------------------------------------------------------------------+-------------+-------------+-------------+-------------
       19 | _timescaledb_internal._hyper_4_19_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1472256000000000,1474848000000000)","[-9223372036854775808,1073741823)"} |      262144 |      393216 |             |      655360
       20 | _timescaledb_internal._hyper_4_20_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1472256000000000,1474848000000000)","[1073741823,9223372036854775807)"}  |      253952 |      368640 |             |      622592
       21 | _timescaledb_internal._hyper_4_21_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1474848000000000,1477440000000000)","[-9223372036854775808,1073741823)"} |      589824 |      909312 |             |     1499136
       22 | _timescaledb_internal._hyper_4_22_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1474848000000000,1477440000000000)","[1073741823,9223372036854775807)"}  |      598016 |      917504 |             |     1515520
       23 | _timescaledb_internal._hyper_4_23_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1477440000000000,1478370697541660)","[1073741823,9223372036854775807)"}  |      229376 |      335872 |             |      565248
       24 | _timescaledb_internal._hyper_4_24_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1477440000000000,1478370697541660)","[-9223372036854775808,1073741823)"} |      229376 |      344064 |             |      573440
       25 | _timescaledb_internal._hyper_4_25_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1478370697541660,1480173588636223)","[1073741823,9223372036854775807)"}  |      417792 |      630784 |             |     1048576
       26 | _timescaledb_internal._hyper_4_26_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1478370697541660,1480173588636223)","[-9223372036854775808,1073741823)"} |      425984 |      614400 |             |     1040384
       27 | _timescaledb_internal._hyper_4_27_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1480173588636223,1481976479730786)","[-9223372036854775808,1073741823)"} |      417792 |      614400 |             |     1032192
       28 | _timescaledb_internal._hyper_4_28_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1480173588636223,1481976479730786)","[1073741823,9223372036854775807)"}  |      425984 |      614400 |             |     1040384
       29 | _timescaledb_internal._hyper_4_29_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1481976479730786,1483779370825349)","[1073741823,9223372036854775807)"}  |      425984 |      622592 |             |     1048576
       30 | _timescaledb_internal._hyper_4_30_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1481976479730786,1483779370825349)","[-9223372036854775808,1073741823)"} |      417792 |      630784 |             |     1048576
       31 | _timescaledb_internal._hyper_4_31_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1483779370825349,1485582261919912)","[-9223372036854775808,1073741823)"} |      425984 |      630784 |             |     1056768
       32 | _timescaledb_internal._hyper_4_32_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1483779370825349,1485582261919912)","[1073741823,9223372036854775807)"}  |      417792 |      630784 |             |     1048576
       33 | _timescaledb_internal._hyper_4_33_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1485582261919912,1487385153014475)","[-9223372036854775808,1073741823)"} |      425984 |      622592 |             |     1048576
       34 | _timescaledb_internal._hyper_4_34_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1485582261919912,1487385153014475)","[1073741823,9223372036854775807)"}  |      417792 |      622592 |             |     1040384
       35 | _timescaledb_internal._hyper_4_35_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1487385153014475,1489188044109038)","[1073741823,9223372036854775807)"}  |      360448 |      565248 |             |      925696
       36 | _timescaledb_internal._hyper_4_36_chunk | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1487385153014475,1489188044109038)","[-9223372036854775808,1073741823)"} |      360448 |      565248 |             |      925696
(18 rows)

SELECT id, hypertable_id, interval_length FROM _timescaledb_catalog.dimension;
 id | hypertable_id | interval_length 
----+---------------+-----------------
  2 |             2 |   1365270236112
  3 |             3 |   2592000000000
  5 |             4 |                
  4 |             4 |   1802891094563
(4 rows)

