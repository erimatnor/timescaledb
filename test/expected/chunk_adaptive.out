-- Valid chunk sizing function for testing
CREATE OR REPLACE FUNCTION calculate_chunk_interval(
        dimension_id INTEGER,
        dimension_coord BIGINT,
        chunk_target_size BIGINT
)
    RETURNS BIGINT LANGUAGE PLPGSQL AS
$BODY$
DECLARE
BEGIN
    RETURN -1;
END
$BODY$;
-- Chunk sizing function with bad signature
CREATE OR REPLACE FUNCTION bad_calculate_chunk_interval(
        dimension_id INTEGER
)
    RETURNS BIGINT LANGUAGE PLPGSQL AS
$BODY$
DECLARE
BEGIN
    RETURN -1;
END
$BODY$;
-- Set a fixed effective memory cache size to make tests determinstic
-- (independent of available machine memory)
SELECT * FROM test.set_effective_memory_cache_size('2GB');
 set_effective_memory_cache_size 
---------------------------------
                      2147483648
(1 row)

CREATE TABLE test_adaptive(time timestamptz, temp float, location int);
\set ON_ERROR_STOP 0
-- Bad signature of sizing func should fail
SELECT create_hypertable('test_adaptive', 'time',
                         chunk_target_size => '1MB',
                         chunk_sizing_func => 'bad_calculate_chunk_interval');
ERROR:  invalid number of function arguments
\set ON_ERROR_STOP 1
-- Setting sizing func with correct signature should work
SELECT create_hypertable('test_adaptive', 'time',
                         chunk_target_size => '1MB',
                         chunk_sizing_func => 'calculate_chunk_interval');
NOTICE:  adding NOT NULL constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

DROP TABLE test_adaptive;
CREATE TABLE test_adaptive(time timestamptz, temp float, location int);
-- Size but no explicit func should use default func
SELECT create_hypertable('test_adaptive', 'time',
                         chunk_target_size => '1MB',
                         create_default_indexes => true);
NOTICE:  adding NOT NULL constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |           1048576
(1 row)

-- Change the target size
SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', '2MB');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |           2097152
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |           2097152
(1 row)

\set ON_ERROR_STOP 0
-- Setting NULL func should fail
SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', '1MB', NULL);
ERROR:  invalid chunk sizing function
\set ON_ERROR_STOP 1
-- Setting NULL size disables adaptive chunking
SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', NULL);
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |                 0
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |                 0
(1 row)

SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', '1MB');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |           1048576
(1 row)

-- Setting size to 'off' should also disable
SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', 'off');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |                 0
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |                 0
(1 row)

-- Setting 0 size should do an estimate.
SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', '0MB');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |         536870912
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |         536870912
(1 row)

SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', '1MB');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |           1048576
(1 row)

-- Setting size to 'estimate' should also estimate size
SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', 'estimate');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |         536870912
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |         536870912
(1 row)

-- Use a lower memory setting to test that the calculated chunk_target_size is reduced
SELECT * FROM test.set_effective_memory_cache_size('512MB');
 set_effective_memory_cache_size 
---------------------------------
                       536870912
(1 row)

SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', 'estimate');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |         134217728
(1 row)

SELECT table_name, chunk_sizing_func_schema, chunk_sizing_func_name, chunk_target_size
FROM _timescaledb_catalog.hypertable;
  table_name   | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
---------------+--------------------------+--------------------------+-------------------
 test_adaptive | _timescaledb_internal    | calculate_chunk_interval |         134217728
(1 row)

-- Reset memory settings
SELECT * FROM test.set_effective_memory_cache_size('2GB');
 set_effective_memory_cache_size 
---------------------------------
                      2147483648
(1 row)

-- Set a reasonable test value
SELECT * FROM set_adaptive_chunk_sizing('test_adaptive', '1MB');
               chunk_sizing_func                | chunk_target_size 
------------------------------------------------+-------------------
 _timescaledb_internal.calculate_chunk_interval |           1048576
(1 row)

-- Show the interval length before and after adaptation
SELECT id, hypertable_id, interval_length FROM _timescaledb_catalog.dimension;
 id | hypertable_id | interval_length 
----+---------------+-----------------
  2 |             2 |   2592000000000
(1 row)

-- Generate data to create chunks. We use the hash of the time value
-- to get determinstic location IDs so that we always spread these
-- values the same way across space partitions
INSERT INTO test_adaptive
SELECT time, random() * 35, _timescaledb_internal.get_partition_hash(time) FROM
generate_series('2017-03-07T18:18:03+00'::timestamptz - interval '175 days',
                '2017-03-07T18:18:03+00'::timestamptz,
                '2 minutes') as time;
SELECT * FROM chunk_relation_size('test_adaptive');
 chunk_id |                 chunk_table                 | partitioning_columns |  partitioning_column_types   | partitioning_hash_functions |                 ranges                  | table_bytes | index_bytes | toast_bytes | total_bytes 
----------+---------------------------------------------+----------------------+------------------------------+-----------------------------+-----------------------------------------+-------------+-------------+-------------+-------------
        1 | "_timescaledb_internal"."_hyper_2_1_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1472256000000000,1474848000000000)"} |      491520 |      352256 |             |      843776
        2 | "_timescaledb_internal"."_hyper_2_2_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1474848000000000,1477440000000000)"} |     1155072 |      835584 |             |     1990656
        3 | "_timescaledb_internal"."_hyper_2_3_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1477440000000000,1478587665709296)"} |      524288 |      385024 |             |      909312
        4 | "_timescaledb_internal"."_hyper_2_4_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1478587665709296,1478721078120000)"} |       90112 |       65536 |             |      155648
        5 | "_timescaledb_internal"."_hyper_2_5_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1478721078120000,1480065370009200)"} |      614400 |      442368 |             |     1056768
        6 | "_timescaledb_internal"."_hyper_2_6_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1480065370009200,1481409661898400)"} |      614400 |      442368 |             |     1056768
        7 | "_timescaledb_internal"."_hyper_2_7_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1481409661898400,1482753953787600)"} |      614400 |      442368 |             |     1056768
        8 | "_timescaledb_internal"."_hyper_2_8_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1482753953787600,1484098245676800)"} |      614400 |      442368 |             |     1056768
        9 | "_timescaledb_internal"."_hyper_2_9_chunk"  | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1484098245676800,1485442537566000)"} |      614400 |      442368 |             |     1056768
       10 | "_timescaledb_internal"."_hyper_2_10_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1485442537566000,1486786829455200)"} |      614400 |      442368 |             |     1056768
       11 | "_timescaledb_internal"."_hyper_2_11_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1486786829455200,1488131121344400)"} |      614400 |      442368 |             |     1056768
       12 | "_timescaledb_internal"."_hyper_2_12_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1488131121344400,1489475413233600)"} |      368640 |      270336 |             |      638976
(12 rows)

-- Do same thing without an index on the time column. This affects
-- both the calculation of fill-factor of the chunk and its size
CREATE TABLE test_adaptive_no_index(time timestamptz, temp float, location int);
-- Size but no explicit func should use default func
SELECT create_hypertable('test_adaptive_no_index', 'time',
                         chunk_target_size => '1MB',
                         create_default_indexes => false);
NOTICE:  adding NOT NULL constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT id, hypertable_id, interval_length FROM _timescaledb_catalog.dimension;
 id | hypertable_id | interval_length 
----+---------------+-----------------
  2 |             2 |   1344291889200
  3 |             3 |   2592000000000
(2 rows)

INSERT INTO test_adaptive_no_index
SELECT time, random() * 35, _timescaledb_internal.get_partition_hash(time) FROM
generate_series('2017-03-07T18:18:03+00'::timestamptz - interval '175 days',
                '2017-03-07T18:18:03+00'::timestamptz,
                '2 minutes') as time;
SELECT * FROM chunk_relation_size('test_adaptive_no_index');
 chunk_id |                 chunk_table                 | partitioning_columns |  partitioning_column_types   | partitioning_hash_functions |                 ranges                  | table_bytes | index_bytes | toast_bytes | total_bytes 
----------+---------------------------------------------+----------------------+------------------------------+-----------------------------+-----------------------------------------+-------------+-------------+-------------+-------------
       13 | "_timescaledb_internal"."_hyper_3_13_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1472256000000000,1474848000000000)"} |      491520 |           0 |             |      491520
       14 | "_timescaledb_internal"."_hyper_3_14_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1474848000000000,1477440000000000)"} |     1155072 |           0 |             |     1155072
       15 | "_timescaledb_internal"."_hyper_3_15_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1477440000000000,1477629561281804)"} |      114688 |           0 |             |      114688
       16 | "_timescaledb_internal"."_hyper_3_16_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1477629561281804,1479982474595947)"} |     1048576 |           0 |             |     1048576
       17 | "_timescaledb_internal"."_hyper_3_17_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1479982474595947,1482335387910090)"} |     1048576 |           0 |             |     1048576
       18 | "_timescaledb_internal"."_hyper_3_18_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1482335387910090,1484688301224233)"} |     1048576 |           0 |             |     1048576
       19 | "_timescaledb_internal"."_hyper_3_19_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1484688301224233,1487041214538376)"} |     1048576 |           0 |             |     1048576
       20 | "_timescaledb_internal"."_hyper_3_20_chunk" | {time}               | {"timestamp with time zone"} | {NULL}                      | {"[1487041214538376,1489394127852519)"} |      843776 |           0 |             |      843776
(8 rows)

-- Test with space partitioning. This might affect the estimation
-- since there are more chunks in the same time interval and space
-- chunks might be unevenly filled.
CREATE TABLE test_adaptive_space(time timestamptz, temp float, location int);
SELECT create_hypertable('test_adaptive_space', 'time', 'location', 2,
                         chunk_target_size => '1MB',
                         create_default_indexes => true);
NOTICE:  adding NOT NULL constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT id, hypertable_id, interval_length FROM _timescaledb_catalog.dimension;
 id | hypertable_id | interval_length 
----+---------------+-----------------
  2 |             2 |   1344291889200
  3 |             3 |   2352913314143
  4 |             4 |   2592000000000
  5 |             4 |                
(4 rows)

INSERT INTO test_adaptive_space
SELECT time, random() * 35, _timescaledb_internal.get_partition_hash(time) FROM
generate_series('2017-03-07T18:18:03+00'::timestamptz - interval '175 days',
                '2017-03-07T18:18:03+00'::timestamptz,
                '2 minutes') as time;
SELECT * FROM chunk_relation_size('test_adaptive_space');
 chunk_id |                 chunk_table                 | partitioning_columns |      partitioning_column_types       |           partitioning_hash_functions           |                                   ranges                                    | table_bytes | index_bytes | toast_bytes | total_bytes 
----------+---------------------------------------------+----------------------+--------------------------------------+-------------------------------------------------+-----------------------------------------------------------------------------+-------------+-------------+-------------+-------------
       21 | "_timescaledb_internal"."_hyper_4_21_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1472256000000000,1474848000000000)","[-9223372036854775808,1073741823)"} |      262144 |      393216 |             |      655360
       22 | "_timescaledb_internal"."_hyper_4_22_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1472256000000000,1474848000000000)","[1073741823,9223372036854775807)"}  |      253952 |      368640 |             |      622592
       23 | "_timescaledb_internal"."_hyper_4_23_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1474848000000000,1477440000000000)","[-9223372036854775808,1073741823)"} |      589824 |      909312 |             |     1499136
       24 | "_timescaledb_internal"."_hyper_4_24_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1474848000000000,1477440000000000)","[1073741823,9223372036854775807)"}  |      598016 |      917504 |             |     1515520
       25 | "_timescaledb_internal"."_hyper_4_25_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1477440000000000,1478370697541660)","[1073741823,9223372036854775807)"}  |      229376 |      335872 |             |      565248
       26 | "_timescaledb_internal"."_hyper_4_26_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1477440000000000,1478370697541660)","[-9223372036854775808,1073741823)"} |      229376 |      344064 |             |      573440
       27 | "_timescaledb_internal"."_hyper_4_27_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1478370697541660,1478622046449724)","[1073741823,9223372036854775807)"}  |       81920 |      114688 |             |      196608
       28 | "_timescaledb_internal"."_hyper_4_28_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1478370697541660,1478622046449724)","[-9223372036854775808,1073741823)"} |       81920 |      114688 |             |      196608
       29 | "_timescaledb_internal"."_hyper_4_29_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1478622046449724,1480380217729688)","[-9223372036854775808,1073741823)"} |      417792 |      622592 |             |     1040384
       30 | "_timescaledb_internal"."_hyper_4_30_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1478622046449724,1480380217729688)","[1073741823,9223372036854775807)"}  |      409600 |      606208 |             |     1015808
       31 | "_timescaledb_internal"."_hyper_4_31_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1480380217729688,1482138389009652)","[1073741823,9223372036854775807)"}  |      409600 |      622592 |             |     1032192
       32 | "_timescaledb_internal"."_hyper_4_32_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1480380217729688,1482138389009652)","[-9223372036854775808,1073741823)"} |      409600 |      614400 |             |     1024000
       33 | "_timescaledb_internal"."_hyper_4_33_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1482138389009652,1483896560289616)","[-9223372036854775808,1073741823)"} |      409600 |      614400 |             |     1024000
       34 | "_timescaledb_internal"."_hyper_4_34_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1482138389009652,1483896560289616)","[1073741823,9223372036854775807)"}  |      417792 |      622592 |             |     1040384
       35 | "_timescaledb_internal"."_hyper_4_35_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1483896560289616,1485654731569580)","[1073741823,9223372036854775807)"}  |      409600 |      614400 |             |     1024000
       36 | "_timescaledb_internal"."_hyper_4_36_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1483896560289616,1485654731569580)","[-9223372036854775808,1073741823)"} |      417792 |      622592 |             |     1040384
       37 | "_timescaledb_internal"."_hyper_4_37_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1485654731569580,1487412902849544)","[1073741823,9223372036854775807)"}  |      409600 |      614400 |             |     1024000
       38 | "_timescaledb_internal"."_hyper_4_38_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1485654731569580,1487412902849544)","[-9223372036854775808,1073741823)"} |      409600 |      606208 |             |     1015808
       39 | "_timescaledb_internal"."_hyper_4_39_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1487412902849544,1489171074129508)","[-9223372036854775808,1073741823)"} |      360448 |      573440 |             |      933888
       40 | "_timescaledb_internal"."_hyper_4_40_chunk" | {time,location}      | {"timestamp with time zone",integer} | {NULL,_timescaledb_internal.get_partition_hash} | {"[1487412902849544,1489171074129508)","[1073741823,9223372036854775807)"}  |      352256 |      548864 |             |      901120
(20 rows)

SELECT id, hypertable_id, interval_length FROM _timescaledb_catalog.dimension;
 id | hypertable_id | interval_length 
----+---------------+-----------------
  2 |             2 |   1344291889200
  3 |             3 |   2352913314143
  5 |             4 |                
  4 |             4 |   1758171279964
(4 rows)

